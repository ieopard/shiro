<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	

    <!-- 设置servlet编码开始 -->
    <filter>
        <filter-name>Set Character Encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>Set Character Encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 设置servlet编码结束 -->
    
    <!-- Spring配置文件开始  -->    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:spring/application-*.xml
        </param-value>
    </context-param>

    <!-- Spring配置文件结束 -->
        
    <!--如果 发现报 该错误 No mapping found for HTTP request with URI  加入下mapping
    <servlet-mapping>
        <servlet-name>jsp</servlet-name>
        <url-pattern>*.jsp</url-pattern>
    </servlet-mapping-->

    <!-- 浏览器不支持put,delete等method,由该filter将/blog?_method=delete转换为标准的http delete方法 -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <servlet-name>spring</servlet-name>
    </filter-mapping>

    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>	
    
    <!-- custom filter -->
    
 <!--   <filter>
    	<filter-name>sessionFilter</filter-name>
    	<filter-class>com.java.framework.filter.ReaderSessionFilter</filter-class>
    </filter>
    
    <filter-mapping>
    	<filter-name>sessionFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <filter>
    	<filter-name>loginFilter</filter-name>
    	<filter-class>com.java.framework.filter.LoginFilter</filter-class>
    </filter>
    
    <filter-mapping>
    	<filter-name>loginFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
     <filter>
    	<filter-name>searchWac</filter-name>
    	<filter-class>com.java.framework.filter.SearchApplicationContentFilter</filter-class>
    </filter>
    
    <filter-mapping>
    	<filter-name>searchWac</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping> -->
    
    <!-- custom filter -->
    
    <!-- shiro config -->
    <!-- The filter-name matches name of a 'shiroFilter' bean inside applicationContext.xml -->
	<filter>
	    <filter-name>shiroFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <init-param>
	        <param-name>targetFilterLifecycle</param-name>
	        <param-value>true</param-value>
	    </init-param>
	</filter> 
	
	<!-- Make sure any request you want accessible to Shiro is filtered. /* catches all -->
	<!-- requests.  Usually this filter mapping is defined first (before all others) to -->
	<!-- ensure that Shiro works in subsequent filters in the filter chain:             -->
	<filter-mapping>
	    <filter-name>shiroFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping> 
    
    <!-- shiro config-->
	<listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>
	
	
    <welcome-file-list>
   		 <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
